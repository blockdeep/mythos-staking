
//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.0.0
//! DATE: 2025-03-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `blockdeep-ref-hw`, CPU: `AMD EPYC 7232P 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("mainnet-local-v")`, DB CACHE: 1024

// Executed Command:
// ./target/production/mythos-node
// benchmark
// pallet
// --chain
// mainnet-local-v
// --pallet
// pallet_multisig
// --extrinsic
// *
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/mainnet/src/weights/pallet_multisig.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_990_000 picoseconds.
		Weight::from_parts(14_339_228, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 7
			.saturating_add(Weight::from_parts(455, 0).saturating_mul(z.into()))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `5587`
		// Minimum execution time: 46_569_000 picoseconds.
		Weight::from_parts(39_103_526, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 1_749
			.saturating_add(Weight::from_parts(81_808, 0).saturating_mul(s.into()))
			// Standard Error: 17
			.saturating_add(Weight::from_parts(2_132, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `279`
		//  Estimated: `5587`
		// Minimum execution time: 29_630_000 picoseconds.
		Weight::from_parts(23_251_338, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 1_113
			.saturating_add(Weight::from_parts(74_446, 0).saturating_mul(s.into()))
			// Standard Error: 10
			.saturating_add(Weight::from_parts(2_081, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339 + s * (20 Â±0)`
		//  Estimated: `5587`
		// Minimum execution time: 51_680_000 picoseconds.
		Weight::from_parts(42_294_828, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 2_691
			.saturating_add(Weight::from_parts(106_374, 0).saturating_mul(s.into()))
			// Standard Error: 26
			.saturating_add(Weight::from_parts(2_129, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn approve_as_multi_create(s: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `5587`
		// Minimum execution time: 35_999_000 picoseconds.
		Weight::from_parts(37_489_515, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 1_381
			.saturating_add(Weight::from_parts(86_733, 0).saturating_mul(s.into()))
			// Standard Error: 13
			.saturating_add(Weight::from_parts(33, 0).saturating_mul(1000u32.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn approve_as_multi_approve(s: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `279`
		//  Estimated: `5587`
		// Minimum execution time: 20_760_000 picoseconds.
		Weight::from_parts(21_921_735, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 348
			.saturating_add(Weight::from_parts(72_442, 0).saturating_mul(s.into()))
			// Standard Error: 3
			.saturating_add(Weight::from_parts(3, 0).saturating_mul(1000u32.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn cancel_as_multi(s: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `380`
		//  Estimated: `5587`
		// Minimum execution time: 36_530_000 picoseconds.
		Weight::from_parts(38_293_859, 0)
			.saturating_add(Weight::from_parts(0, 5587))
			// Standard Error: 1_110
			.saturating_add(Weight::from_parts(83_001, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
